import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'crashlytics'

repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
}


android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    defaultConfig {
        applicationId "com.snilius.mysl"
        minSdkVersion 14
        targetSdkVersion 20
        versionCode 9
        versionName "0.4" // remember to bump ga version too
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            applicationVariants.all { variant ->
                def file = variant.outputFile
                if (variant.buildType.name == "release") {
                    variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + "_" + defaultConfig.versionCode + "_${buildTime()}.apk"))
                }
            }
        }

        debug {
            runProguard false
        }
    }
}

dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
//    // You must install or update the Support Repository through the SDK manager to use this dependency.
    compile 'com.android.support:support-v4:20.+'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.koushikdutta.ion:ion:1.3.7'
    compile 'com.github.gabrielemariotti.cards:library:1.8.+'
    compile 'com.crashlytics.android:crashlytics:1.+'
//    compile 'com.google.android.gms:play-services:5.2.08'
    compile 'com.google.android.gms:play-services:5.0.89'
    compile 'com.jakewharton.timber:timber:2.4.+'
}

def props = new Properties()

// Fetch properties for signing
def propFile = new File('release.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    android.signingConfigs.release.storeFile file(props.keyStore)
    android.signingConfigs.release.storePassword props.keyStorePassword
    android.signingConfigs.release.keyAlias props.keyAlias
    android.signingConfigs.release.keyPassword props.keyAliasPassword
} else {
    println 'release.properties not found'
    android.buildTypes.release.signingConfig = null
}

def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm")
    df.setTimeZone(TimeZone.getDefault())
    return df.format(new Date())
}